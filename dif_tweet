export default function Tweet({ username, photo, tweet, userId, id }: ITweet) {
  const [isLoading, setIsLoading] = useState(false);
  const [edit, setEdit] = useState(false);
  const [editText, setEditText] = useState("");
  const [editFile, setEditFile] = useState<File | null>(null);
  const user = auth.currentUser;
  
  const onDelete = async () => {
    const ok = confirm("Are you sure you want to delete this tweet?");
    if (!ok || user?.uid !== userId) return;
    try {
      await deleteDoc(doc(db, "tweets", id));
      if (photo) {
        const photoRef = ref(storage, `tweets/${id}`);  //<---- original version => `tweets/${user.uid}/${id}`
        await deleteObject(photoRef);                   // id = doc.id
      }
    } catch (e) {
      console.log(e);
    } finally {
      //
    }
  };
  
  const onChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setEditText(e.target.value);
    console.log(e.target.value)
  };

  const onFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { files } = e.target;
    if (files && files.length === 1) {
      setEditFile(files[0]);
    }
  };

  const onEdit = () => {
    setEdit(true)
    console.log(editText)
    console.log(editFile)
  };


  const onSubmit = async (e) => {
    e.preventDefault();
    const user = auth.currentUser;
    if (!user || isLoading || editText.length > 180)
      return;

      try {
        setIsLoading(true);
        const tweetRef = doc(db, "tweets", id);
        if(editText){
            await updateDoc(tweetRef, {tweet: editText});
    }
       if (editFile) {
      const photoRef = ref(storage,`tweets/${id}}/${user.uid}`)
        await deleteObject(photoRef)
      const result = await uploadBytes(photoRef, editFile);
      const url = await getDownloadURL(result.ref);
      await updateDoc(tweetRef, {photo: url});
    }
      setEditText("");
      setEdit(false);
      setEditFile(null);
    }catch (e) {
      console.log(e);
    } finally {
      setIsLoading(false);
    }
  };
}